function __init__tudataset()
    DEPNAME = "TUDataset"
    LINK = "https://www.chrsmrrs.com/graphkerneldatasets"
    DOCS = "https://chrsmrrs.github.io/datasets/docs/home/"
    DATA = "PROTEINS.zip"

    register(DataDep(
        DEPNAME,
        """
        Dataset: The $DEPNAME dataset.
        Website: $LINK)
        """,
        "$LINK/$DATA",
        "2da8de15284b88edabca2888ce5444d62f364ed41159260977088c4e53d4d848",  # if checksum omitted, will be generated by DataDeps
        post_fetch_method = unpack
    ))
end

struct TUDataset <: AbstractDataset
    name::String
    tot_num_nodes::Int
    tot_num_edges::Int
    num_nodes::Vector{Int}
    num_edges::Vector{Int}
    num_graphs::Int
    source::Vector{Vector{Int}}
    target::Vector{Vector{Int}}
    node_labels::Union{Nothing, Vector{Vector{Int}}}
    edge_labels::Union{Nothing, Vector{Vector{Int}}}
    graph_labels::Union{Nothing, Vector{Int}}
    node_attributes::Union{Nothing, Vector{Vector{Float32}}}
    edge_attributes::Union{Nothing, Vector{Vector{Float32}}}
    graph_attributes::Union{Nothing, Vector{Float32}}
end

"""
    TUDataset(name; dir=nothing)

A variety of graph benchmark datasets, *.e.g.* "QM9", "IMDB-BINARY",
"REDDIT-BINARY" or "PROTEINS", collected from the [TU Dortmund University](https://chrsmrrs.github.io/datasets/).
Retrieve from TUDataset collection the dataset `name`, where `name`
is any of the datasets available [here](https://chrsmrrs.github.io/datasets/docs/datasets/). 

A `TUDataset` object can be indexed to retrieve a specific graph or a subset of graphs.

# Internal fields

```
tot_num_nodes           # total number of nodes (considering all graphs)
tot_num_edges           # total number of edges (considering all graphs)       
num_nodes
num_edges
num_graphs          # number of graphs
source              # vector of edges' source vectors      
target              # vector of edges' target vectors
node_labels
edge_labels
graph_labels
node_attributes
edge_attributes
graph_attributes
```

See [here](https://chrsmrrs.github.io/datasets/docs/format/) for an in-depth 
description of the format. 

# Examples

```julia
using MLDatasets: TUDataset
using LightGraphs: SimpleGraph, add_edge!

data = TUDataset("PROTEINS")

# Access first graph
d1 = data[1] 

# Create a LightGraphs' graph
g = SimpleGraph(d1.num_nodes)
for (s, t) in zip(d1.source, d1.target)
    add_edge!(g, s, t)
end

# Node features
X = d1.node_attributes # (num__features x num_nodes) matrix
```
"""
function TUDataset(name; dir=nothing)
    d = datadir_tudataset(name, dir)
    # See here for the file format: https://chrsmrrs.github.io/datasets/docs/format/
    
    st = readdlm(joinpath(d, "$(name)_A.txt"), ',', Int)
    # Check that the first node is labeled 1.
    # TODO this will fail if the first node is isolated
    @assert minimum(st) == 1
    source, target = st[:,1], st[:,2]

    graph_indicator = readdlm(joinpath(d, "$(name)_graph_indicator.txt"), Int) |> vec      
    unique_indicator = unique(graph_indicator)
    num_graphs = length(unique_indicator)
    @assert all(sort(unique_indicator) .== 1:num_graphs)
    @assert issorted(graph_indicator)
    num_nodes = [n for n in values(MLUtils.group_counts(graph_indicator))]

    tot_num_nodes = sum(num_nodes)

    edge_graph_indicator = graph_indicator[source]
    @assert edge_graph_indicator == graph_indicator[target]
    @assert issorted(edge_graph_indicator)
    num_edges = [n for n in values(MLUtils.group_counts(edge_graph_indicator))]
    tot_num_edges = sum(num_edges)

    all_s = Vector{Int}[]
    all_t = Vector{Int}[]
    n_nodes = 0
    n_edges = 0
    for i in 1:num_graphs
        push!(all_s, source[n_edges+1:n_edges+num_edges[i]] .- n_nodes)
        push!(all_t, target[n_edges+1:n_edges+num_edges[i]] .- n_nodes)
        n_edges += num_edges[i]
        n_nodes += num_nodes[i]
    end
    
    # LOAD OPTIONAL FILES IF EXIST
    
    node_labels = read_tudataset_labels(joinpath(d, "$(name)_node_labels.txt"), 
                    Int, num_nodes, num_graphs)
    edge_labels = read_tudataset_labels(joinpath(d, "$(name)_edge_labels.txt"),
                    Int, num_edges, num_graphs)
    graph_labels = isfile(joinpath(d, "$(name)_graph_labels.txt")) ?
                    readdlm(joinpath(d, "$(name)_graph_labels.txt"), Int) |> vec :
                    nothing

    node_attributes = read_tudataset_labels(joinpath(d, "$(name)_node_attributes.txt"), 
                        Float32, num_nodes, num_graphs)
    edge_attributes = read_tudataset_labels(joinpath(d, "$(name)_edge_attributes.txt"), 
                        Float32, num_edges, num_graphs)
    graph_attributes = isfile(joinpath(d, "$(name)_graph_attributes.txt")) ?
                        readdlm(joinpath(d, "$(name)_graph_attributes.txt"), ',', Float32)' |> collect :
                        nothing

    TUDataset(  name, 
                tot_num_nodes, tot_num_edges,
                num_nodes, num_edges, num_graphs,
                all_s, all_t, 
                node_labels,
                edge_labels,            
                graph_labels,
                node_attributes, 
                edge_attributes,
                graph_attributes)
end

function read_tudataset_labels(path, T, nums::Vector{Int}, num_graphs::Int)
    v = isfile(path) ?
            readdlm(path, ',', T) |> vec :
            nothing
    
    v === nothing && return nothing

    vv = Vector{T}[]
    n = 0
    for i in 1:num_graphs
        push!(vv, v[n+1:n+nums[i]])
        n += nums[i]
    end
    return vv
end

function read_tudataset_attribute(path, T, nums::Vector{Int}, num_graphs::Int)
    v = isfile(path) ?
            readdlm(path, ',', T)' |> collect :
            nothing
    
    v === nothing && return nothing
    
    vv = Matrix{T}[]
    n = 0
    for i in 1:num_graphs
        push!(vv, v[:,n+1:n+nums[i]])
        n += nums[i]
    end
    return vv
end


function datadir_tudataset(name, dir = nothing)
    dir = isnothing(dir) ? datadep"TUDataset" : dir
    LINK = "https://www.chrsmrrs.com/graphkerneldatasets/$name.zip"
    d  = joinpath(dir, name)
    if !isdir(d)
        DataDeps.fetch_default(LINK, dir)
        currdir = pwd()
        cd(dir) # Needed since `unpack` extracts in working dir
        DataDeps.unpack(joinpath(dir, "$name.zip"))
        cd(currdir)
    end
    @assert isdir(d)
    return d
end

Base.length(data::TUDataset) = data.num_graphs

function Base.getindex(data::TUDataset, i)
    return getobs((; 
                data.num_nodes, 
                data.num_edges,
                data.source, 
                data.target, 
                data.node_labels,
                data.edge_labels,            
                data.graph_labels,
                data.node_attributes, 
                data.edge_attributes,
                data.graph_attributes), i)
end

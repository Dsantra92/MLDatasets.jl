function __init__iris()
    DEPNAME = "Iris"
    LINK = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/"
    DOCS = "https://archive.ics.uci.edu/ml/datasets/Iris"
    DATA = "iris.data"

    register(DataDep(
        DEPNAME,
        """
        Dataset: The Iris dataset
        Website: $DOCS
        """,
        LINK .* [DATA],
        "6f608b71a7317216319b4d27b4d9bc84e6abd734eda7872b71a458569e2656c0"  # if checksum omitted, will be generated by DataDeps
    ))
end

"""
    Iris(; dir = nothing)

Fisher's classic iris dataset.

Measurements from 3 different species of iris: setosa, versicolor and
virginica. There are 50 examples of each species.

There are 4 measurements for each example: sepal length, sepal width, petal
length and petal width.  The measurements are in centimeters.

The module retrieves the data from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/iris).

NOTE: no pre-defined train-test split for this dataset. 

# Examples

```julia-repl
julia> using MLDatasets: Iris

julia> dataset = Iris()
Iris dataset:
  features : 4Ã—150 Matrix{Float64}
  targets : 150-element Vector{String}

julia> dataset[1:2]
(features = [5.1 4.9; 3.5 3.0; 1.4 1.4; 0.2 0.2], targets = ["Iris-setosa", "Iris-setosa"])

julia> X, y = dataset[];
```
"""
struct Iris <: AbstractDataset
    _path::String
    features::Matrix{Float64}
    targets::Vector{String}
end

function Iris(; dir = nothing)
    path = datafile("Iris", "iris.data", dir)
    iris = readdlm(path, ',')
    targets = Vector{String}(iris[:, end])
    features = Matrix{Float64}(iris[:, 1:4])' |> collect
    return Iris(path, features, targets)
end

# deprecated in v0.6
function Base.getproperty(::Type{Iris}, s::Symbol)
    if s == :features
        @warn "Iris.features() is deprecated, use `Iris().features` instead."
        return () -> Iris().features
    elseif s == :labels
        @warn "Iris.labels() is deprecated, use `Iris().targets` instead."
        return () -> Iris().targets
    else 
        return getfield(Iris, s)
    end
end
